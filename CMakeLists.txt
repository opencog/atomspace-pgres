PROJECT(OPENCOG)
SET(CMAKE_BUILD_TYPE Debug) #Release)

CMAKE_MINIMUM_REQUIRED(VERSION 2.4)

# add the 'lib' dir to cmake's module search path
SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/lib/")

IF(CMAKE_COMPILER_IS_GNUCXX)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g -fstack-protector -Wall")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

# check dependencies
IF (WIN32)
	FIND_PACKAGE(PThreads REQUIRED)
	FIND_PACKAGE(STLPort REQUIRED)
	INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}/include/win32" ${PTHREADS_INCLUDE_DIR} ${STLPORT_INCLUDE_DIR})
	LINK_LIBRARIES(${PTHREADS_LIBRARY} ${STLPORT_LIBRARIES})
ELSE (WIN32)
	LINK_LIBRARIES(pthread)
ENDIF (WIN32)
FIND_PACKAGE(EXPAT REQUIRED)
FIND_PACKAGE(CSockets REQUIRED)
FIND_PACKAGE(OpenSSL REQUIRED)
FIND_PACKAGE(Boost REQUIRED)
# FIND_PACKAGE(LibMemCached)
FIND_PACKAGE(IODBC)
IF (IODBC_FOUND)
	# Enable the use of SQL storage, if either iodbc of unixodbc is found.
	# Caution: this can also increase RAM usage significantly!
	ADD_DEFINITIONS(-DHAVE_SQL_STORAGE)
	SET(ODBC_INCLUDE_DIRS ${IODBC_INCLUDE_DIRS})
	SET(ODBC_LIBRARIES ${IODBC_LIBRARIES})
ELSE (IODBC_FOUND)
	FIND_PACKAGE(UnixODBC)
	IF (UnixODBC_FOUND)
		ADD_DEFINITIONS(-DHAVE_SQL_STORAGE)
		SET(ODBC_INCLUDE_DIRS ${UnixODBC_INCLUDE_DIRS})
		SET(ODBC_LIBRARIES ${UnixODBC_LIBRARIES})
	ENDIF (UnixODBC_FOUND)
ENDIF (IODBC_FOUND)

FIND_PACKAGE(Guile)
IF (GUILE_FOUND)
	ADD_DEFINITIONS(-DHAVE_GUILE)
ENDIF (GUILE_FOUND)

# At this time,. there is no reason to build with memcached for 
# any "normal" use, so just stub it out.
# IF (LIBMEMCACHED_FOUND)
#	ADD_DEFINITIONS(-DHAVE_LIBMEMCACHED)
# ENDIF (LIBMEMCACHED_FOUND)

# global includes
INCLUDE_DIRECTORIES (${Boost_INCLUDE_DIRS})

# recurse into 'src' and 'tests' dirs
ADD_SUBDIRECTORY(src)

ADD_CUSTOM_TARGET(tests)
ADD_SUBDIRECTORY(tests EXCLUDE_FROM_ALL)

ADD_CUSTOM_TARGET(test
	DEPENDS tests
	WORKING_DIRECTORY tests
	COMMAND $(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running tests..."
	COMMAND ${CMAKE_CTEST_COMMAND} --force-new-ctest-process $(ARGS)
)
